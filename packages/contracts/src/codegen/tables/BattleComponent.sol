// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { BattleStatus } from "./../Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("BattleComponent")));
bytes32 constant BattleComponentTableId = _tableId;

struct BattleComponentData {
  bytes32 opponent;
  bytes32 option;
  BattleStatus status;
  string hashSalt;
}

library BattleComponent {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.BYTES32;
    _schema[2] = SchemaType.UINT8;
    _schema[3] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](4);
    _fieldNames[0] = "opponent";
    _fieldNames[1] = "option";
    _fieldNames[2] = "status";
    _fieldNames[3] = "hashSalt";
    return ("BattleComponent", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get opponent */
  function getOpponent(bytes32 playerId, bytes32 locationId) internal view returns (bytes32 opponent) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get opponent (using the specified store) */
  function getOpponent(IStore _store, bytes32 playerId, bytes32 locationId) internal view returns (bytes32 opponent) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set opponent */
  function setOpponent(bytes32 playerId, bytes32 locationId, bytes32 opponent) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((opponent)));
  }

  /** Set opponent (using the specified store) */
  function setOpponent(IStore _store, bytes32 playerId, bytes32 locationId, bytes32 opponent) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((opponent)));
  }

  /** Get option */
  function getOption(bytes32 playerId, bytes32 locationId) internal view returns (bytes32 option) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get option (using the specified store) */
  function getOption(IStore _store, bytes32 playerId, bytes32 locationId) internal view returns (bytes32 option) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set option */
  function setOption(bytes32 playerId, bytes32 locationId, bytes32 option) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((option)));
  }

  /** Set option (using the specified store) */
  function setOption(IStore _store, bytes32 playerId, bytes32 locationId, bytes32 option) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((option)));
  }

  /** Get status */
  function getStatus(bytes32 playerId, bytes32 locationId) internal view returns (BattleStatus status) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return BattleStatus(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get status (using the specified store) */
  function getStatus(IStore _store, bytes32 playerId, bytes32 locationId) internal view returns (BattleStatus status) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return BattleStatus(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set status */
  function setStatus(bytes32 playerId, bytes32 locationId, BattleStatus status) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(status)));
  }

  /** Set status (using the specified store) */
  function setStatus(IStore _store, bytes32 playerId, bytes32 locationId, BattleStatus status) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(status)));
  }

  /** Get hashSalt */
  function getHashSalt(bytes32 playerId, bytes32 locationId) internal view returns (string memory hashSalt) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (string(_blob));
  }

  /** Get hashSalt (using the specified store) */
  function getHashSalt(
    IStore _store,
    bytes32 playerId,
    bytes32 locationId
  ) internal view returns (string memory hashSalt) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (string(_blob));
  }

  /** Set hashSalt */
  function setHashSalt(bytes32 playerId, bytes32 locationId, string memory hashSalt) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, bytes((hashSalt)));
  }

  /** Set hashSalt (using the specified store) */
  function setHashSalt(IStore _store, bytes32 playerId, bytes32 locationId, string memory hashSalt) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    _store.setField(_tableId, _keyTuple, 3, bytes((hashSalt)));
  }

  /** Get the length of hashSalt */
  function lengthHashSalt(bytes32 playerId, bytes32 locationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of hashSalt (using the specified store) */
  function lengthHashSalt(IStore _store, bytes32 playerId, bytes32 locationId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of hashSalt (unchecked, returns invalid data if index overflows) */
  function getItemHashSalt(bytes32 playerId, bytes32 locationId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of hashSalt (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemHashSalt(
    IStore _store,
    bytes32 playerId,
    bytes32 locationId,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to hashSalt */
  function pushHashSalt(bytes32 playerId, bytes32 locationId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /** Push a slice to hashSalt (using the specified store) */
  function pushHashSalt(IStore _store, bytes32 playerId, bytes32 locationId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    _store.pushToField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /** Pop a slice from hashSalt */
  function popHashSalt(bytes32 playerId, bytes32 locationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 3, 1);
  }

  /** Pop a slice from hashSalt (using the specified store) */
  function popHashSalt(IStore _store, bytes32 playerId, bytes32 locationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    _store.popFromField(_tableId, _keyTuple, 3, 1);
  }

  /** Update a slice of hashSalt at `_index` */
  function updateHashSalt(bytes32 playerId, bytes32 locationId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    StoreSwitch.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)));
  }

  /** Update a slice of hashSalt (using the specified store) at `_index` */
  function updateHashSalt(
    IStore _store,
    bytes32 playerId,
    bytes32 locationId,
    uint256 _index,
    string memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    _store.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(bytes32 playerId, bytes32 locationId) internal view returns (BattleComponentData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store,
    bytes32 playerId,
    bytes32 locationId
  ) internal view returns (BattleComponentData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 playerId,
    bytes32 locationId,
    bytes32 opponent,
    bytes32 option,
    BattleStatus status,
    string memory hashSalt
  ) internal {
    bytes memory _data = encode(opponent, option, status, hashSalt);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 playerId,
    bytes32 locationId,
    bytes32 opponent,
    bytes32 option,
    BattleStatus status,
    string memory hashSalt
  ) internal {
    bytes memory _data = encode(opponent, option, status, hashSalt);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 playerId, bytes32 locationId, BattleComponentData memory _table) internal {
    set(playerId, locationId, _table.opponent, _table.option, _table.status, _table.hashSalt);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 playerId, bytes32 locationId, BattleComponentData memory _table) internal {
    set(_store, playerId, locationId, _table.opponent, _table.option, _table.status, _table.hashSalt);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (BattleComponentData memory _table) {
    // 65 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 65));

    _table.opponent = (Bytes.slice32(_blob, 0));

    _table.option = (Bytes.slice32(_blob, 32));

    _table.status = BattleStatus(uint8(Bytes.slice1(_blob, 64)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 65) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 97;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.hashSalt = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    bytes32 opponent,
    bytes32 option,
    BattleStatus status,
    string memory hashSalt
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(bytes(hashSalt).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return abi.encodePacked(opponent, option, status, _encodedLengths.unwrap(), bytes((hashSalt)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 playerId, bytes32 locationId) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 playerId, bytes32 locationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 playerId, bytes32 locationId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = playerId;
    _keyTuple[1] = locationId;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
