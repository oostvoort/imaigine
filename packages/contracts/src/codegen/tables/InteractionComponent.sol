// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("InteractionCompo")));
bytes32 constant InteractionComponentTableId = _tableId;

struct InteractionComponentData {
  bytes32 waitingFor;
  uint256 lastInteraction;
  bytes participantsActions;
}

library InteractionComponent {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.BYTES;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](3);
    _fieldNames[0] = "waitingFor";
    _fieldNames[1] = "lastInteraction";
    _fieldNames[2] = "participantsActions";
    return ("InteractionComponent", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get waitingFor */
  function getWaitingFor(
    bytes32 interactingEntityID,
    bytes32 interactedEntityID
  ) internal view returns (bytes32 waitingFor) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get waitingFor (using the specified store) */
  function getWaitingFor(
    IStore _store,
    bytes32 interactingEntityID,
    bytes32 interactedEntityID
  ) internal view returns (bytes32 waitingFor) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set waitingFor */
  function setWaitingFor(bytes32 interactingEntityID, bytes32 interactedEntityID, bytes32 waitingFor) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((waitingFor)));
  }

  /** Set waitingFor (using the specified store) */
  function setWaitingFor(
    IStore _store,
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    bytes32 waitingFor
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((waitingFor)));
  }

  /** Get lastInteraction */
  function getLastInteraction(
    bytes32 interactingEntityID,
    bytes32 interactedEntityID
  ) internal view returns (uint256 lastInteraction) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get lastInteraction (using the specified store) */
  function getLastInteraction(
    IStore _store,
    bytes32 interactingEntityID,
    bytes32 interactedEntityID
  ) internal view returns (uint256 lastInteraction) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set lastInteraction */
  function setLastInteraction(
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    uint256 lastInteraction
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((lastInteraction)));
  }

  /** Set lastInteraction (using the specified store) */
  function setLastInteraction(
    IStore _store,
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    uint256 lastInteraction
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((lastInteraction)));
  }

  /** Get participantsActions */
  function getParticipantsActions(
    bytes32 interactingEntityID,
    bytes32 interactedEntityID
  ) internal view returns (bytes memory participantsActions) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (bytes(_blob));
  }

  /** Get participantsActions (using the specified store) */
  function getParticipantsActions(
    IStore _store,
    bytes32 interactingEntityID,
    bytes32 interactedEntityID
  ) internal view returns (bytes memory participantsActions) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (bytes(_blob));
  }

  /** Set participantsActions */
  function setParticipantsActions(
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    bytes memory participantsActions
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    StoreSwitch.setField(_tableId, _keyTuple, 2, bytes((participantsActions)));
  }

  /** Set participantsActions (using the specified store) */
  function setParticipantsActions(
    IStore _store,
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    bytes memory participantsActions
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    _store.setField(_tableId, _keyTuple, 2, bytes((participantsActions)));
  }

  /** Get the length of participantsActions */
  function lengthParticipantsActions(
    bytes32 interactingEntityID,
    bytes32 interactedEntityID
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of participantsActions (using the specified store) */
  function lengthParticipantsActions(
    IStore _store,
    bytes32 interactingEntityID,
    bytes32 interactedEntityID
  ) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of participantsActions (unchecked, returns invalid data if index overflows) */
  function getItemParticipantsActions(
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    uint256 _index
  ) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Get an item of participantsActions (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemParticipantsActions(
    IStore _store,
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    uint256 _index
  ) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (bytes(_blob));
  }

  /** Push a slice to participantsActions */
  function pushParticipantsActions(
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    bytes memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Push a slice to participantsActions (using the specified store) */
  function pushParticipantsActions(
    IStore _store,
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    bytes memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    _store.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Pop a slice from participantsActions */
  function popParticipantsActions(bytes32 interactingEntityID, bytes32 interactedEntityID) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Pop a slice from participantsActions (using the specified store) */
  function popParticipantsActions(IStore _store, bytes32 interactingEntityID, bytes32 interactedEntityID) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    _store.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Update a slice of participantsActions at `_index` */
  function updateParticipantsActions(
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    uint256 _index,
    bytes memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Update a slice of participantsActions (using the specified store) at `_index` */
  function updateParticipantsActions(
    IStore _store,
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    uint256 _index,
    bytes memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    _store.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(
    bytes32 interactingEntityID,
    bytes32 interactedEntityID
  ) internal view returns (InteractionComponentData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store,
    bytes32 interactingEntityID,
    bytes32 interactedEntityID
  ) internal view returns (InteractionComponentData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    bytes32 waitingFor,
    uint256 lastInteraction,
    bytes memory participantsActions
  ) internal {
    bytes memory _data = encode(waitingFor, lastInteraction, participantsActions);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    bytes32 waitingFor,
    uint256 lastInteraction,
    bytes memory participantsActions
  ) internal {
    bytes memory _data = encode(waitingFor, lastInteraction, participantsActions);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    InteractionComponentData memory _table
  ) internal {
    set(interactingEntityID, interactedEntityID, _table.waitingFor, _table.lastInteraction, _table.participantsActions);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(
    IStore _store,
    bytes32 interactingEntityID,
    bytes32 interactedEntityID,
    InteractionComponentData memory _table
  ) internal {
    set(
      _store,
      interactingEntityID,
      interactedEntityID,
      _table.waitingFor,
      _table.lastInteraction,
      _table.participantsActions
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (InteractionComponentData memory _table) {
    // 64 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 64));

    _table.waitingFor = (Bytes.slice32(_blob, 0));

    _table.lastInteraction = (uint256(Bytes.slice32(_blob, 32)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 64) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 96;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.participantsActions = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    bytes32 waitingFor,
    uint256 lastInteraction,
    bytes memory participantsActions
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](1);
    _counters[0] = uint40(bytes(participantsActions).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return abi.encodePacked(waitingFor, lastInteraction, _encodedLengths.unwrap(), bytes((participantsActions)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(
    bytes32 interactingEntityID,
    bytes32 interactedEntityID
  ) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 interactingEntityID, bytes32 interactedEntityID) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 interactingEntityID, bytes32 interactedEntityID) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32((interactingEntityID));
    _keyTuple[1] = bytes32((interactedEntityID));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
